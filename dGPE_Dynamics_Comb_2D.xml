<simulation xmds-version="2">
<name>dGPE_Dynamics</name>
<author>Matt Reeves</author>
<description>
Stir an througuh an ellipse with two stirrers at the edges. The ellipse is rotated 45 degrees. 
</description>

<features>
    <validation kind="run-time" />
     <arguments>
        <argument name="xmin" type="real" default_value="-120.0"/>
        <argument name="xmax" type="real" default_value="120.0"/>
        <argument name="ymin" type="real" default_value="-120.0"/>
        <argument name="ymax" type="real" default_value="120.0"/>
        <argument name="numGridPoints1" type="integer" default_value="480"/>
        <argument name="numGridPoints2" type="integer" default_value="480"/>
    </arguments>

    <auto_vectorise />
    <diagnostics />
    <benchmark />
    <openmp />
    <bing />
    <fftw plan="patient" threads ="2" />
    <globals>
    <![CDATA[
    	 const double  Uint = 1;
    	 const double gamma0 = 8.5e-4;
    	 const double mu0 = 1.0;
         const double tau = 2.0*28.0/(0.5/1461.0)/3.0;
         const double V0 = 5.0;
    	 const double L  = 120.0;
         const double w  = 4.0;
    	 const double Ru = 120.0;
    	 const double Rv = 85.0;
         const double su = 3.0*L/4.0;
         const double sv = +Rv + 1.2*13.5;
         const double V = -390.0/1461.0;
	 ]]>
    </globals>
</features>

<driver name="distributed-mpi" /> 

<geometry>
    <propagation_dimension> t </propagation_dimension>
    <transverse_dimensions>
	<dimension name="x" lattice="numGridPoints1"  domain="(xmin, xmax)" />	
	<dimension name="y" lattice="numGridPoints2"  domain="(ymin, ymax)" />
	</transverse_dimensions>
</geometry>

<vector name="potential" dimensions="x y" type="real">
	<components> V1 </components>
    <initialisation kind = "hdf5"> 
        <filename> RotatedEllipse2D_DoubleRes.h5 </filename>
    </initialisation>
</vector>

<!-- Rather than having ugly expressions in potential, define some new coordinates -->
<vector name="coordinates" dimensions="x y" type="real">
	<components> u v </components>
    <initialisation> 
        <![CDATA[
            u = (x-y)/sqrt(2.0);
            v = (x+y)/sqrt(2.0);
        ]]>
    </initialisation>
</vector>

<computed_vector name="stirrer" dimensions="x y" type="real">
    <components>  V2 rr1  </components>
    <evaluation>
    <dependencies> coordinates </dependencies>
    <![CDATA[
    double sigma;
    double Ncomb = 7.0;
    double d = 2.0*Ru/(Ncomb + 1.0);
    double thalf = fabs(sv/V);
    double width = 0.8;
    if (t < thalf){
        sigma = 4.5;
    }
    else {
        sigma = 4.5*(1 - fabs(V)*(t-thalf)/Rv);
    }
   sigma = (sigma > 0.5) ? sigma : 0.5;
   V2 = 0.5*V0*(1 - tanh( (sqrt( (u )*(u) + (v-sv-V*t)*(v-sv-V*t) )        - sigma)/width ))
      + 0.5*V0*(1 - tanh( (sqrt( (u-d)*(u-d) + (v-sv-V*t)*(v-sv-V*t) )     - sigma)/width ))
      + 0.5*V0*(1 - tanh( (sqrt( (u+d)*(u+d) + (v-sv-V*t)*(v-sv-V*t) )     - sigma)/width ))
      + 0.5*V0*(1 - tanh( (sqrt( (u-2*d)*(u-2*d) + (v-sv-V*t)*(v-sv-V*t) ) - sigma)/width ))
      + 0.5*V0*(1 - tanh( (sqrt( (u+2*d)*(u+2*d) + (v-sv-V*t)*(v-sv-V*t) ) - sigma)/width ))
      + 0.5*V0*(1 - tanh( (sqrt( (u-3*d)*(u-3*d) + (v-sv-V*t)*(v-sv-V*t) ) - sigma)/width ))
      + 0.5*V0*(1 - tanh( (sqrt( (u+3*d)*(u+3*d) + (v-sv-V*t)*(v-sv-V*t) ) - sigma)/width )); 
        ]]>
     </evaluation>
</computed_vector>

<vector name="init_wavefunction" dimensions="x y" type="real">
    <components> phiI phiR </components>
    <initialisation kind = "hdf5">
        <filename> Groundstate.h5 </filename>
    </initialisation>
</vector>

<noise_vector name="initial_noise" dimensions="x y" type = "real" kind = "gauss">
    <components> fuzz1 fuzz2 </components>
</noise_vector>

<vector name="wavefunction" dimensions = "x y" type = "complex">
    <components> phi </components>
    <initialisation>
        <dependencies> init_wavefunction initial_noise  </dependencies>
        <![CDATA[ 
             phi = phiR + i*phiI;
             phi += 1e-3*(fuzz1 + i*fuzz2);
        ]]>
    </initialisation>
</vector>

<sequence cycles = "1500">
    <filter>
        <![CDATA[ printf("Hello world from a filter segment!\n");  ]]>
    </filter>
    <integrate algorithm="ARK45" interval="20" steps ='1000' tolerance="1e-6" >
        <samples> 1 </samples>
        <operators>
            <operator kind="ex" constant="yes" type = "complex">
            <operator_names>T </operator_names>
            <![CDATA[
                T = -0.5*(gamma0+i)*(kx*kx + ky*ky);
                //if (kx*kx + ky*ky < M_PI*M_PI){
                //	P = 1.0;
                //}
                //else {
                //    P =0.0;
                //}
             ]]>
            </operator>
            <integration_vectors>wavefunction</integration_vectors>
            <dependencies>potential stirrer</dependencies> 
            <![CDATA[
            dphi_dt = T[phi] + (i+gamma0)*(mu0*exp(-t/tau)-V1-V2-mod2(phi))*phi;
            
    	    ]]>
        </operators>
     </integrate>
     <breakpoint   format = "hdf5" >
        <dependencies basis="x y">wavefunction </dependencies>
    </breakpoint>
</sequence>

<output format = "hdf5" filename = "JUNK_OUT.xsil">
<sampling_group basis="" initial_sample="no">
<moments> JUNK </moments>
<dependencies>   </dependencies>
<![CDATA[
         ]]> 
</sampling_group>
</output> 

</simulation>

